
--对原有api的改进.使得其可以可以调用stroke规则、unit规则和character规则，并进行相关返回.
local math = math
local string = string
local tonumber = tonumber
local tostring = tostring
local table = table
local JSON = require("JSON")

Pass2CStr = ""
--########################			辅助函数				#############################
function string:split(sep,sign)
	local sep, fields = sep or "\t", {}
	local pattern = string.format("([^"..sign.."]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end

function superSplit(szFullString, szSeparator)
	local nFindStartIndex = 1
	local nSplitIndex = 1
	local nSplitArray = {}
	while true do
		local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
		if not nFindLastIndex then
		 nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
		 break
		end
		nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
		nFindStartIndex = nFindLastIndex + string.len(szSeparator)
		nSplitIndex = nSplitIndex + 1
	end
	return nSplitArray
end

function trim(s)
	return (string.gsub(s,"^%s*(.-)%s*$","%1"))
end

function trim2(s)
	return (string.gsub(s,"@",""))
end

--#########################			辅助函数			#######################################

--######################### PassParametersToAPI ########################################
strokeLevel = nil
local writeHZ = nil
local PointTableStrings={}
local strUnitRule = nil
local strCharacterRule = nil
local RunAPI = {}

function RunAPI:PassParametersToAPI(WriteZi,Level,UnitRule,CharacterRule)
	--初始化手写字
	local WZ = require("WriteZiInfo")
	writeHZ = WZ.WriteHZ:new()
	writeHZ:initialize(WriteZi)


	--将所有手写点集存按笔画存在表中
	for i,v in ipairs(writeHZ.strokeStrings)do
	PointTableStrings[#PointTableStrings+1]=writeHZ.strokeStrings[i]
	end

	local str = trim2(WriteZi)
	baseFuncs = require("BaseLib")
	baseFuncs.setWriteZiInfo(writeHZ)
	baseFuncs.setWZEnv(WZ)
	--baseFuncs.setStdHZ(stdHZ)
	baseFuncs.GetPoints(str)
	baseFuncs.initStrokeStrs(PointTableStrings)

	strokeLevel = Level
	--部件
	local ZiRuleList = self:parseUnitRule(UnitRule)
	--整字
	local CharacterRule = self:parseZiRule(CharacterRule)
	--将部件和整字组装
	local NewZiRuleArr = self:contractRule(ZiRuleList,CharacterRule)

	local bhNum = writeHZ.strokeNum
	baseFuncs.setbhNum(bhNum)
	print"============"
	print (bhNum)
	self:RunZiRule(bhNum,NewZiRuleArr)

	local Pass2CStrList={}
	Pass2CStrList = baseFuncs.infostr

	local ret = Pass2CStrList[1]
	ret = tonumber(ret)
	local bhinfo = 1

	local bhrightinfo = math.floor(ret/1000)
	local wzrightinfo = math.floor((ret-bhrightinfo*1000)/100)
	local unitrightinfo =math.floor((ret-bhrightinfo*1000-wzrightinfo*100)/10)
	local zirightinfo =math.floor(ret-bhrightinfo*1000-wzrightinfo*100-unitrightinfo*10)
	print"//////////////////////"
	print (bhrightinfo,wzrightinfo,unitrightinfo,zirightinfo,ret)

	local errortype = {}

	local errorstroke =Pass2CStrList[3]

	local errorpoint =Pass2CStrList[4]

	if(bhrightinfo == 0 )then
		ret = "011"
		table.insert(errortype,"B0001")
		errorstroke = nil
	elseif(wzrightinfo == 0)then
		ret = "011"
		table.insert(errortype,"B0002")
		errorstroke = nil
	elseif(bhrightinfo == 1 and wzrightinfo == 1 )then
		ret = bhrightinfo*100 + unitrightinfo*10 + zirightinfo
		print"笔画正确"
	else
		print"笔画正确"
	end

	if(#errortype < 1 and Pass2CStrList[2] ~= "nil")then
	table.insert(errortype,Pass2CStrList[2])
	end

	ret=tostring(ret)

	function error_string(ret,errortype, errorstroke, errorpoint)
		 local error = { ["ret"]=ret, ["errortype"]=errortype , ["errorstroke"] = errorstroke, ["errorpoint"]= errorpoint}
		 return error
	end

	errors = {}
	table.insert(errors, error_string(ret,errortype,errorstroke, errorpoint))

	function error_json_string(errors)
		 return { error = errors }
	end

	local result2 = {}
	result2 = JSON:encode(error_json_string(errors))
	print(JSON:encode(error_json_string(errors)))
	return result2
end



--######################### PassParametersToAPI ########################################


--#########################	处理手写字信息		 ########################################
--local WriteZiStr = GetWriteInfoFromC()	--外部接口1
--有三个笔画的点
--local WriteZiStr =[[53/186/53/188/53/190/53/192/53/192/55/192/57/192/59/192/61/192/63/192/65/192/66/192/68/192/70/192/72/192/74/192/76/192/78/192/79/192/81/192/83/192/85/192/87/192/89/192/91/192/93/192/93/192/95/192/97/192/99/192/101/192/103/192/105/192/107/192/109/192/111/192/113/192/113/192/115/193/117/194/119/195/121/196/123/197/125/198/127/199/129/200/131/201/133/202/135/203/137/204/139/205/139/199/141/199/143/199/145/199/147/199/149/199/151/199/153/199/155/199/157/199/159/199/161/199/163/199/165/199/166/199/168/199/170/199/172/199/174/199/176/199/178/199/180/199/182/199/184/199/186/199/188/199/190/199/192/199/192/199/194/199/196/199/198/199/200/199/202/199/204/199/206/199/208/199/210/199/212/199/214/199/216/199/218/199/220/199/222/199/224/199/226/199/226/206/228/206/230/206/232/206/234/206/236/206/238/206/240/206/242/206/244/206/246/206/246/206/248/207/250/208/252/209/254/210/256/211/258/212/260/213/262/214/264/215/265/212/267/212/269/212/271/212/273/212/275/212/277/212/279/212/281/212/283/212/285/212/287/212/289/212/291/212/292/212/294/212/296/212/298/212/300/212/302/212/304/212/305/212/307/212/309/212/311/212/313/212/315/212/317/212/319/212/321/212/323/212/325/212/325/212/327/212/329/212/331/212/333/212/335/212/337/212/339/212/341/212/343/212/345/212/345/212/347/212/349/212/351/212/353/212/355/212/357/212/359/212/359/212/361/212/363/212/365/212/367/212/369/212/371/212/372/212/374/212/376/212/378/212/379/212/380/213/381/214/382/215/383/216/385/219/387/219/389/219/391/219/393/219/395/219/397/219/398/219/400/219/402/219/404/219/405/219/407/219/409/219/411/219/412/219/414/219/416/219/418/219/420/219/422/219/424/219/425/219/427/219/429/219/431/219/433/219/435/219/437/219/438/219/440/219/442/219/444/219/446/219/448/219/450/219/452/219/452/219/454/219/456/219/458/219/458/219/460/219/462/219/464/219/465/219/467/219/469/219/471/219/472/219/474/219/476/219/478/219/478/219/480/219/482/219/484/219/485/219/487/219/489/219/491/219/492/219/@259/26/259/28/259/30/259/32/259/33/259/35/259/37/259/39/259/39/259/41/259/43/259/45/259/46/259/48/259/50/259/52/259/53/259/55/259/57/259/59/259/61/259/63/259/65/259/66/259/68/259/70/259/72/259/73/259/75/259/77/259/79/259/81/259/83/259/85/259/86/259/88/259/90/259/92/259/93/258/94/257/95/256/96/255/97/252/99/252/101/252/103/252/105/252/106/252/108/252/110/252/112/252/114/252/116/252/118/252/119/252/121/252/123/252/125/252/126/252/128/252/130/252/132/252/134/252/136/252/138/252/139/251/140/250/141/249/142/248/143/246/146/246/148/246/150/246/152/246/152/246/154/246/156/246/158/246/160/246/162/246/164/246/166/246/166/245/167/244/168/243/169/242/170/239/172/239/174/239/176/239/178/239/180/239/182/239/184/239/186/239/186/238/187/237/188/236/189/235/190/232/192/232/194/232/196/232/198/232/200/232/202/232/204/232/206/232/206/232/208/232/210/232/212/232/212/231/213/230/214/229/215/228/216/226/219/226/221/226/223/226/225/226/227/226/229/226/231/226/232/225/233/224/234/223/235/222/236/219/239/219/241/219/243/219/245/219/246/219/248/219/250/219/252/219/252/218/253/217/254/216/255/215/256/212/259/212/261/212/263/212/265/212/265/212/267/212/269/212/271/212/272/212/274/212/276/212/278/212/279/211/280/210/281/209/282/208/283/206/285/205/286/204/287/203/288/202/289/199/292/199/294/199/296/199/298/199/299/199/301/199/303/199/305/199/305/198/306/197/307/196/308/195/309/192/312/192/314/192/316/192/318/192/319/191/321/190/323/189/325/188/327/187/329/186/331/185/333/186/332/186/334/186/336/186/338/186/339/185/340/184/341/183/342/182/343/181/344/180/345/179/346/178/347/177/348/172/352/172/354/172/356/172/358/172/360/172/362/172/364/172/365/171/365/170/365/169/365/166/365/165/367/164/369/163/371/162/373/161/375/160/377/159/379/159/379/158/380/157/381/156/382/155/383/152/385/152/387/152/389/152/391/152/392/151/393/150/394/149/395/148/396/146/398/146/400/146/402/146/404/146/405/145/406/144/407/143/408/142/409/139/412/139/414/139/416/139/418/139/418/137/418/135/418/133/418/132/418/132/420/132/422/132/424/132/425/131/426/130/427/129/428/128/429/126/432/124/432/122/432/120/432/119/432/119/434/119/436/119/438/119/438/118/438/117/438/116/438/113/438/113/440/113/442/113/444/113/445/112/446/111/447/110/448/109/449/106/452/104/452/102/452/100/452/99/452/99/454/99/456/99/458/99/458/98/458/97/458/96/458/93/458/93/460/93/462/93/464/93/465/91/465/89/465/87/465/86/465/85/466/84/467/83/468/82/469/79/472/78/472/77/472/76/472/73/472/72/473/71/474/70/475/69/476/66/478/64/478/62/478/60/478/59/478/58/478/57/478/56/478/53/478/52/479/51/480/50/481/49/482/46/485/44/485/42/485/40/485/39/485/38/485/37/485/36/485/33/485/33/487/33/489/33/491/33/492/31/492/29/492/27/492/25/492/23/492/21/492/19/492/19/492/17/492/15/492/13/492/11/492/9/492/7/492/6/492/5/492/4/492/3/492/0/492/0/494/0/496/0/498/0/498/@239/226/239/228/239/230/239/232/239/232/239/234/239/236/239/238/239/239/239/241/239/243/239/245/239/246/239/248/239/250/239/252/239/252/240/253/241/254/242/255/243/256/246/259/246/261/246/263/246/265/246/265/248/265/250/265/252/265/252/265/252/267/252/269/252/271/252/272/254/272/256/272/258/272/259/272/259/274/259/276/259/278/259/279/260/280/261/281/262/282/263/283/265/285/265/287/265/289/265/291/265/292/266/293/267/294/268/295/269/296/272/299/273/300/274/301/275/302/276/303/279/305/279/307/279/309/279/311/279/312/281/312/283/312/285/312/285/312/285/314/285/316/285/318/285/319/287/319/289/319/291/319/292/319/292/321/292/323/292/325/292/325/293/326/294/327/295/328/296/329/299/332/300/333/301/334/302/335/303/336/305/339/305/341/305/343/305/345/305/345/307/345/309/345/311/345/312/345/312/347/312/349/312/351/312/352/314/352/316/352/318/352/319/352/319/354/319/356/319/358/319/359/320/360/321/361/322/362/323/363/325/365/326/366/327/367/328/368/329/369/332/372/333/373/334/374/335/375/336/376/339/379/340/380/341/381/342/382/343/383/345/385/346/386/347/387/348/388/349/389/352/392/354/392/356/392/358/392/359/392/359/394/359/396/359/398/359/398/360/399/361/400/362/401/363/402/365/405/366/406/367/407/368/408/369/409/372/412/373/413/374/414/375/415/376/416/379/418/381/418/383/418/385/418/385/418/386/419/387/420/388/421/389/422/392/425/394/425/396/425/398/425/398/425/398/427/398/429/398/431/398/432/400/432/402/432/404/432/406/432/408/432/410/432/412/432/412/432/413/433/414/434/415/435/416/436/418/438/420/438/422/438/424/438/425/438/426/439/427/440/428/441/429/442/432/445/434/445/436/445/438/445/438/445/439/446/440/447/441/448/442/449/445/452/447/452/449/452/451/452/452/452/452/454/452/456/452/458/452/458/454/458/456/458/458/458/458/458/459/459/460/460/461/461/462/462/465/465/467/465/469/465/471/465/472/465/473/466/474/467/475/468/476/469/478/472/480/472/482/472/484/472/485/472/487/472/489/472/491/472/492/472/493/473/494/474/495/475/496/476/498/478/500/478/502/478/504/478/505/478/506/479/507/480/508/481/509/482/512/485/@]]
--有一个笔画的点
--local WriteZiStr =[[53/186/53/188/53/190/53/192/53/192/55/192/57/192/59/192/61/192/63/192/65/192/66/192/68/192/70/192/72/192/74/192/76/192/78/192/79/192/81/192/83/192/85/192/87/192/89/192/91/192/93/192/93/192/95/192/97/192/99/192/101/192/103/192/105/192/107/192/109/192/111/192/113/192/113/192/115/193/117/194/119/195/121/196/123/197/125/198/127/199/129/200/131/201/133/202/135/203/137/204/139/205/139/199/141/199/143/199/145/199/147/199/149/199/151/199/153/199/155/199/157/199/159/199/161/199/163/199/165/199/166/199/168/199/170/199/172/199/174/199/176/199/178/199/180/199/182/199/184/199/186/199/188/199/190/199/192/199/192/199/194/199/196/199/198/199/200/199/202/199/204/199/206/199/208/199/210/199/212/199/214/199/216/199/218/199/220/199/222/199/224/199/226/199/226/206/228/206/230/206/232/206/234/206/236/206/238/206/240/206/242/206/244/206/246/206/246/206/248/207/250/208/252/209/254/210/256/211/258/212/260/213/262/214/264/215/265/212/267/212/269/212/271/212/273/212/275/212/277/212/279/212/281/212/283/212/285/212/287/212/289/212/291/212/292/212/294/212/296/212/298/212/300/212/302/212/304/212/305/212/307/212/309/212/311/212/313/212/315/212/317/212/319/212/321/212/323/212/325/212/325/212/327/212/329/212/331/212/333/212/335/212/337/212/339/212/341/212/343/212/345/212/345/212/347/212/349/212/351/212/353/212/355/212/357/212/359/212/359/212/361/212/363/212/365/212/367/212/369/212/371/212/372/212/374/212/376/212/378/212/379/212/380/213/381/214/382/215/383/216/385/219/387/219/389/219/391/219/393/219/395/219/397/219/398/219/400/219/402/219/404/219/405/219/407/219/409/219/411/219/412/219/414/219/416/219/418/219/420/219/422/219/424/219/425/219/427/219/429/219/431/219/433/219/435/219/437/219/438/219/440/219/442/219/444/219/446/219/448/219/450/219/452/219/452/219/454/219/456/219/458/219/458/219/460/219/462/219/464/219/465/219/467/219/469/219/471/219/472/219/474/219/476/219/478/219/478/219/480/219/482/219/484/219/485/219/487/219/489/219/491/219/492/219/@]]
--有两个笔画的点
--local WriteZiStr =[[53/186/53/188/53/190/53/192/53/192/55/192/57/192/59/192/61/192/63/192/65/192/66/192/68/192/70/192/72/192/74/192/76/192/78/192/79/192/81/192/83/192/85/192/87/192/89/192/91/192/93/192/93/192/95/192/97/192/99/192/101/192/103/192/105/192/107/192/109/192/111/192/113/192/113/192/115/193/117/194/119/195/121/196/123/197/125/198/127/199/129/200/131/201/133/202/135/203/137/204/139/205/139/199/141/199/143/199/145/199/147/199/149/199/151/199/153/199/155/199/157/199/159/199/161/199/163/199/165/199/166/199/168/199/170/199/172/199/174/199/176/199/178/199/180/199/182/199/184/199/186/199/188/199/190/199/192/199/192/199/194/199/196/199/198/199/200/199/202/199/204/199/206/199/208/199/210/199/212/199/214/199/216/199/218/199/220/199/222/199/224/199/226/199/226/206/228/206/230/206/232/206/234/206/236/206/238/206/240/206/242/206/244/206/246/206/246/206/248/207/250/208/252/209/254/210/256/211/258/212/260/213/262/214/264/215/265/212/267/212/269/212/271/212/273/212/275/212/277/212/279/212/281/212/283/212/285/212/287/212/289/212/291/212/292/212/294/212/296/212/298/212/300/212/302/212/304/212/305/212/307/212/309/212/311/212/313/212/315/212/317/212/319/212/321/212/323/212/325/212/325/212/327/212/329/212/331/212/333/212/335/212/337/212/339/212/341/212/343/212/345/212/345/212/347/212/349/212/351/212/353/212/355/212/357/212/359/212/359/212/361/212/363/212/365/212/367/212/369/212/371/212/372/212/374/212/376/212/378/212/379/212/380/213/381/214/382/215/383/216/385/219/387/219/389/219/391/219/393/219/395/219/397/219/398/219/400/219/402/219/404/219/405/219/407/219/409/219/411/219/412/219/414/219/416/219/418/219/420/219/422/219/424/219/425/219/427/219/429/219/431/219/433/219/435/219/437/219/438/219/440/219/442/219/444/219/446/219/448/219/450/219/452/219/452/219/454/219/456/219/458/219/458/219/460/219/462/219/464/219/465/219/467/219/469/219/471/219/472/219/474/219/476/219/478/219/478/219/480/219/482/219/484/219/485/219/487/219/489/219/491/219/492/219/@259/26/259/28/259/30/259/32/259/33/259/35/259/37/259/39/259/39/259/41/259/43/259/45/259/46/259/48/259/50/259/52/259/53/259/55/259/57/259/59/259/61/259/63/259/65/259/66/259/68/259/70/259/72/259/73/259/75/259/77/259/79/259/81/259/83/259/85/259/86/259/88/259/90/259/92/259/93/258/94/257/95/256/96/255/97/252/99/252/101/252/103/252/105/252/106/252/108/252/110/252/112/252/114/252/116/252/118/252/119/252/121/252/123/252/125/252/126/252/128/252/130/252/132/252/134/252/136/252/138/252/139/251/140/250/141/249/142/248/143/246/146/246/148/246/150/246/152/246/152/246/154/246/156/246/158/246/160/246/162/246/164/246/166/246/166/245/167/244/168/243/169/242/170/239/172/239/174/239/176/239/178/239/180/239/182/239/184/239/186/239/186/238/187/237/188/236/189/235/190/232/192/232/194/232/196/232/198/232/200/232/202/232/204/232/206/232/206/232/208/232/210/232/212/232/212/231/213/230/214/229/215/228/216/226/219/226/221/226/223/226/225/226/227/226/229/226/231/226/232/225/233/224/234/223/235/222/236/219/239/219/241/219/243/219/245/219/246/219/248/219/250/219/252/219/252/218/253/217/254/216/255/215/256/212/259/212/261/212/263/212/265/212/265/212/267/212/269/212/271/212/272/212/274/212/276/212/278/212/279/211/280/210/281/209/282/208/283/206/285/205/286/204/287/203/288/202/289/199/292/199/294/199/296/199/298/199/299/199/301/199/303/199/305/199/305/198/306/197/307/196/308/195/309/192/312/192/314/192/316/192/318/192/319/191/321/190/323/189/325/188/327/187/329/186/331/185/333/186/332/186/334/186/336/186/338/186/339/185/340/184/341/183/342/182/343/181/344/180/345/179/346/178/347/177/348/172/352/172/354/172/356/172/358/172/360/172/362/172/364/172/365/171/365/170/365/169/365/166/365/165/367/164/369/163/371/162/373/161/375/160/377/159/379/159/379/158/380/157/381/156/382/155/383/152/385/152/387/152/389/152/391/152/392/151/393/150/394/149/395/148/396/146/398/146/400/146/402/146/404/146/405/145/406/144/407/143/408/142/409/139/412/139/414/139/416/139/418/139/418/137/418/135/418/133/418/132/418/132/420/132/422/132/424/132/425/131/426/130/427/129/428/128/429/126/432/124/432/122/432/120/432/119/432/119/434/119/436/119/438/119/438/118/438/117/438/116/438/113/438/113/440/113/442/113/444/113/445/112/446/111/447/110/448/109/449/106/452/104/452/102/452/100/452/99/452/99/454/99/456/99/458/99/458/98/458/97/458/96/458/93/458/93/460/93/462/93/464/93/465/91/465/89/465/87/465/86/465/85/466/84/467/83/468/82/469/79/472/78/472/77/472/76/472/73/472/72/473/71/474/70/475/69/476/66/478/64/478/62/478/60/478/59/478/58/478/57/478/56/478/53/478/52/479/51/480/50/481/49/482/46/485/44/485/42/485/40/485/39/485/38/485/37/485/36/485/33/485/33/487/33/489/33/491/33/492/31/492/29/492/27/492/25/492/23/492/21/492/19/492/19/492/17/492/15/492/13/492/11/492/9/492/7/492/6/492/5/492/4/492/3/492/0/492/0/494/0/496/0/498/0/498/@]]



--#########################	处理手写字信息		 ########################################



--#########################	处理标准字信息		 ########################################
--local StandardZiInfo = GetStandardZiInfoFromC()---接口2
--local SZ = require("StandardZiInfo")
--local stdHZ = SZ.StdHZ:new()
--stdHZ:initialize(StandardZiInfo)

--#########################	处理标准字信息		 ########################################


--#########################	单笔画规则调用		 ########################################
--获得规则代码
--local strZiRule = GetRuleInfoFromC()---接口3 注意在外面要判断是取松规则还是紧规则

--#########################	单笔画规则调用		 ########################################


--#########################	不同类别评判模式		 ########################################
--接口4 注意根据松评判或者紧评判给出相应的strokelevel，1、2为松紧规则，3为整字规则

--local strokeLevel =  GetRunLevelFromC()
--strokeLevel=tonumber(strokeLevel)
--local strokeLevel = 3
--#########################	不同类别评判模式		 ########################################


--#########################	 部件和整字评判规则      	 ########################################
--获得部件规则代码
--local strUnitRule = GetUnitRulesFromC()




--#########################	 部件和整字评判规则       	 ########################################


--装载字级别规则 	ZiRuleList = {{index = 1 , codes = "..."},{index = 2 , codes = "..."},{index = 3 , codes = "..."},...}
--[[if(strokeLevel == 1 or strokeLevel == 2)then
	strZiRule  = string.gsub(strZiRule , "//##begin", "" )
	strZiRule  = string.gsub(strZiRule , "//##end", "" )
	strZiRule  = string.gsub(strZiRule , "//##", "//##--" )
	strZiRule  = trim(strZiRule)

	local tmpZiRuleList = {}
	tmpZiRuleList = superSplit(strZiRule ,"//##")
	table.remove(tmpZiRuleList,1)
	for i = 1,#tmpZiRuleList do
		local oneNode = {}
		oneNode.index = i-1
		oneNode.codes = tmpZiRuleList[i]
		ZiRuleList[#ZiRuleList+1] = oneNode
	end

end--]]
--装载部件级别规则	ZiRuleList = {{index = 1 , codes = "..."},{index = 2 , codes = "..."},{index = 3 , codes = "..."},...}
function RunAPI:parseUnitRule(strUnitRule)
	local ZiRuleList = {}
	if(strokeLevel == 3 )then
		strUnitRule  = string.gsub(strUnitRule , "//##begin", "" )
		strUnitRule  = string.gsub(strUnitRule , "//##end", "" )
		strUnitRule  = string.gsub(strUnitRule , "//##", "//##--" )
		strUnitRule  = string.gsub(strUnitRule , "//&&", "--//&&--")
		strUnitRule  = trim(strUnitRule)

		--切割出部件中的规则
		local tmpZiRuleList = {}
		tmpZiRuleList = superSplit(strUnitRule ,"//##")
		table.remove(tmpZiRuleList,1)
		for i = 1,#tmpZiRuleList do
			local oneNode = {}
			oneNode.index = i-1
			oneNode.codes = tmpZiRuleList[i]
			ZiRuleList[#ZiRuleList+1] = oneNode
		end
	end
	return ZiRuleList
end

--将整字规则存到CharacterRule里
function RunAPI:parseZiRule(strCharacterRule)
		local CharacterRule =  {}
	--对整字规则做基本处理
		strCharacterRule  = string.gsub(strCharacterRule , "//##begin", "" )
		strCharacterRule  = string.gsub(strCharacterRule , "//##end", "" )
		strCharacterRule  = string.gsub(strCharacterRule , "//^^", "//^^--")
		strCharacterRule  = trim(strCharacterRule)

		local tmpCharacterRuleList = {}
		tmpCharacterRuleList = superSplit(strCharacterRule ,"//^^")
		table.remove(tmpCharacterRuleList,1)
		for i = 1,#tmpCharacterRuleList do
			local oneNode = {}
			oneNode.index = i-1
			oneNode.codes = tmpCharacterRuleList[i]
			CharacterRule[#CharacterRule+1] = oneNode
		end
		return CharacterRule
end

function RunAPI:contractRule(ZiRuleList,CharacterRule)

--给各个笔画增加笔画数目判断语句
	local NewZiRuleArr = {}
	local str1 = "if(bhNum == "
	local str2 = ") then ".."\n"
	local str3 = "end".."\n"

	local retInfo1 = ""
	local errortype1 =""
	local errorstroke1 =""
	local errorpoint1 =""

	for i = 1,#ZiRuleList do
		local newRule = str1.. tostring (i) ..str2
		local newBH = ""

		if ( i > 1 ) then
			for j = i-2,0,-1 do
				local tempBH = "local bh"..tostring (j) .. " = GetPreBH(" ..tostring(j) .. ") "
				newBH = newBH.."\n"..tempBH
			end
		end
		newRule  = newRule  .. newBH .. ZiRuleList[i].codes.."\n"
		if (strokeLevel == 2 ) then

			local retInfo = "local retInfo = tostring(bflag) .. tostring(pflag)".."\n".."trace(retInfo)".."\n"
			newRule  =  newRule ..retInfo..str3

		elseif (strokeLevel == 3) then--检查为宽松规则，但是有bflag和pflag的信息--.. tostring(InfleRatio1)..tostring(InfleRatio2)

			retInfo1 = "local retInfo = tostring(bflag) ..tostring(pflag) .. tostring(uflag).. tostring(cflag)".."\n".."trace2(retInfo)".."\n"
			errortype1 ="if(errorlist ~= nill) then".."\n".."local errortype1 = tostring(errorlist[1])".."\n".."trace2(errortype1)".."\n".."end".."\n"
			errorstroke1 ="if(errorbh ~= nill) then".."\n".."local errorstroke1 = tostring(errorbh[1])".."\n".."trace2(errorstroke1)".."\n".."end".."\n"
			errorpoint1 = "if(errorpoint ~= nil) then".."\n".."local errorpoint1 = tostring(errorpoint[1])".."\n".."trace2(errorpoint1)".."\n".."end".."\n"

			if (i == #ZiRuleList) then--最后一笔加载整字侧面
				for j = 1,#CharacterRule do
				newRule =newRule ..CharacterRule[j].codes.."\n"
				end
			end
			newRule  =  newRule ..retInfo1..errortype1..errorstroke1..errorpoint1..str3
		else
			newRule  = newRule ..str3
		end
		NewZiRuleArr[#NewZiRuleArr+1] = newRule

	end
	return NewZiRuleArr
end

function RunAPI:RunZiRule(bhNum,NewZiRuleArr)


	local header = [[setmetatable(baseFuncs,{__index= _G})
	setfenv(1,baseFuncs)
	]]
	local pre = header .."\n" .."local bhNum ="..tostring (bhNum) .."\n".."local bl = "..tostring(strokeLevel).."\n".."local bflag = 1".."\n".."local pflag = 1".."\n".."local uflag = 1".."\n".."local cflag = 1".."\n".."local bhflag = 1".."\n".."local errorlist={}".."\n".."local errorbh = {} ".."\n".."local errorpoint = {} ".."\n"
	print(pre)
	local allzirule = table.concat(NewZiRuleArr)
   print"============"
	print (allzirule)
	local result = pre.."\n"..allzirule
	f = loadstring(result)
	f()
end

return RunAPI
